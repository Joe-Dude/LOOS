<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Laughable OS File Explorer</title>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background: #f0f4fa;
            color: #222;
            margin: 0;
            padding: 0;
        }
        .explorer-root {
            display: flex;
            min-height: 100vh;
            height: 100vh;
        }
        .sidebar {
            background: #fff;
            border-right: 1px solid #e3e7ef;
            width: 190px;
            padding-top: 1.2rem;
            display: flex;
            flex-direction: column;
            align-items: stretch;
            box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        }
        .sidebar-title {
            font-size: 1.07rem;
            font-weight: 700;
            margin-bottom: 1.7rem;
            text-align: center;
        }
        .sidebar-menu {
            display: flex;
            flex-direction: column;
            gap: 0.6rem;
        }
        .sidebar-item {
            padding: 0.7rem 1rem;
            border-radius: 8px;
            font-size: 1.05rem;
            font-weight: 500;
            cursor: pointer;
            transition: background 0.16s;
            margin: 0 0.5rem;
        }
        .sidebar-item.active {
            background: #e3e7ef;
            color: #0078d4;
        }
        .sidebar-item:not(.active):hover {
            background: #f3f3fa;
        }
        .main-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            min-width: 0;
            background: #f7f9fc;
            min-height: 0;
        }
        .files-panel {
            display: flex;
            flex-direction: column;
            min-height: 0;
            padding: 1.3rem 2.2rem 1.3rem 2.2rem;
            flex: 1;
            min-width: 0;
        }
        .files-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.6rem;
        }
        .files-list-container {
            position: relative;
            display: flex;
            flex-direction: column;
            min-height: 120px;
            height: auto;
            max-height: calc(100vh - 4.2rem);
            overflow-y: auto;
            margin-bottom: 0.5rem;
            background: none;
        }
        .files-list {
            background: #fff;
            border-radius: 8px;
            border: 1px solid #e3e7ef;
            padding: 1rem;
            min-height: 120px;
            box-shadow: 0 4px 16px rgba(0,0,0,0.03);
            list-style: none;
            margin: 0;
            width: 100%;
        }
        .files-list li {
            margin-bottom: 0.4rem;
            padding: 0.45rem 0.9rem;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.13s;
            font-size: 1.01rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        .files-list li.active, .files-list li:active {
            background: #e2e8f0;
            color: #0078d4;
        }
        .files-list li:hover:not(.active) {
            background: #eaf2fe;
        }
        .delete-btn {
            background: #e81123;
            color: #fff;
            border: none;
            border-radius: 6px;
            padding: 0.2rem 0.7rem;
            font-weight: 600;
            font-size: 0.93rem;
            cursor: pointer;
            margin-left: 0.7rem;
            transition: background 0.18s;
        }
        .delete-btn:hover {
            background: #b90c1f;
        }
        .upload-row {
            display: flex;
            align-items: center;
            gap: 0.7rem;
            margin-bottom: 1rem;
        }
        .upload-label {
            background: #0078d4;
            color: #fff;
            padding: 0.5rem 1.1rem;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            border: none;
            display: inline-block;
            transition: background 0.18s;
        }
        .upload-label:hover {
            background: #005fa3;
        }
        .upload-input {
            display: none;
        }
        .upload-filename {
            color: #666;
            font-size: 0.99rem;
            margin-left: 0.5rem;
            max-width: 260px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        .file-viewer {
            margin-top: 2rem;
            background: #fff;
            border-radius: 8px;
            border: 1px solid #e3e7ef;
            box-shadow: 0 2px 8px rgba(0,0,0,0.07);
            padding: 1.3rem;
            min-height: 170px;
            max-width: 100%;
        }
        .file-viewer-title {
            font-size: 1.07rem;
            font-weight: 600;
            margin-bottom: 1.1rem;
        }
        .file-viewer pre {
            background: #f3f3fa;
            border-radius: 6px;
            padding: 0.7rem;
            font-size: 0.97rem;
            max-height: 350px;
            overflow-x: auto;
            word-break: break-all;
        }
        .file-viewer img {
            max-width: 240px;
            max-height: 200px;
            border-radius: 7px;
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
            border: 1px solid #e3e7ef;
        }
        .file-viewer video {
            max-width: 340px;
            max-height: 200px;
            border-radius: 7px;
            margin-top: 0.5rem;
            margin-bottom: 0.5rem;
            border: 1px solid #e3e7ef;
            background: #000;
        }
        .download-btn, .fullscreen-btn {
            background: #0078d4;
            color: #fff;
            border: none;
            border-radius: 6px;
            padding: 0.4rem 1.1rem;
            font-weight: 500;
            font-size: 1rem;
            cursor: pointer;
            margin-top: 0.5rem;
            margin-right: 0.5rem;
        }
        .download-btn:hover, .fullscreen-btn:hover {
            background: #005fa3;
        }
        #fullscreen-overlay {
            position: fixed;
            inset: 0;
            background: rgba(20, 24, 32, 0.97);
            z-index: 10000;
            display: none;
            align-items: center;
            justify-content: center;
        }
        #fullscreen-content {
            max-width: 98vw;
            max-height: 98vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
        }
        #fullscreen-close {
            position: absolute;
            top: 24px;
            right: 32px;
            background: #222;
            color: #fff;
            border: none;
            border-radius: 18px;
            font-size: 2rem;
            width: 36px;
            height: 36px;
            cursor: pointer;
            z-index: 10010;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        #fullscreen-download {
            position: absolute;
            top: 24px;
            left: 32px;
            background: #0078d4;
            color: #fff;
            border: none;
            border-radius: 18px;
            font-size: 1.3rem;
            width: 36px;
            height: 36px;
            cursor: pointer;
            z-index: 10010;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.18s;
        }
        #fullscreen-download:hover {
            background: #005fa3;
        }
        #fullscreen-content img, #fullscreen-content iframe, #fullscreen-content video {
            max-width: 96vw;
            max-height: 92vh;
            border-radius: 10px;
            box-shadow: 0 8px 48px rgba(0,0,0,0.2);
            background: #fff;
        }
        #fullscreen-content pre, #fullscreen-content code {
            background: #1e293b;
            color: #e2e8f0;
            border-radius: 10px;
            font-size: 1rem;
            padding: 1.2rem;
            max-width: 92vw;
            max-height: 90vh;
            overflow: auto;
            margin: 0;
            box-shadow: 0 8px 48px rgba(0,0,0,0.2);
        }
        /* Confirm Overlay Styles */
        #confirm-overlay {
            position: fixed;
            top: 0; left: 0; right: 0; bottom: 0;
            background: rgba(40, 48, 56, 0.8);
            z-index: 20000;
            display: none;
            align-items: center;
            justify-content: center;
        }
        #confirm-dialog {
            background: #fff;
            border-radius: 12px;
            padding: 2.5rem 2rem 1.5rem 2rem;
            box-shadow: 0 4px 32px rgba(0,0,0,0.15);
            max-width: 96vw;
            min-width: 320px;
            text-align: center;
            position: relative;
        }
        #confirm-dialog h2 {
            font-size: 1.23rem;
            font-weight: 700;
            margin-bottom: 1rem;
        }
        #confirm-dialog p {
            margin-bottom: 2rem;
            color: #2b2b2b;
        }
        #confirm-dialog .confirm-btn-row {
            display: flex;
            gap: 1.7rem;
            justify-content: center;
        }
        #confirm-dialog .confirm-btn {
            padding: 0.6rem 2.2rem;
            border-radius: 8px;
            border: none;
            font-size: 1.08rem;
            font-weight: 600;
            cursor: pointer;
            transition: background 0.15s;
        }
        #confirm-dialog .yes-btn {
            background: #e81123;
            color: #fff;
        }
        #confirm-dialog .yes-btn:hover {
            background: #b90c1f;
        }
        #confirm-dialog .no-btn {
            background: #f3f3fa;
            color: #222;
            border: 1px solid #ddd;
        }
        #confirm-dialog .no-btn:hover {
            background: #e3e7ef;
        }
    </style>
</head>
<body>
<div class="explorer-root">
    <div class="sidebar">
        <div class="sidebar-title">File Explorer</div>
        <div class="sidebar-menu">
            <div class="sidebar-item" data-folder="l_drive">L:// (browser storage)</div>
            <div class="sidebar-item active" data-folder="downloads">Downloads</div>
        </div>
    </div>
    <div class="main-panel">
        <div class="files-panel">
            <div class="files-title" id="files-title">Files in Downloads</div>
            <div id="upload-area" class="upload-row" style="display: flex;">
                <label for="upload-input" class="upload-label">Upload File</label>
                <input type="file" id="upload-input" class="upload-input" />
                <span id="upload-filename" class="upload-filename"></span>
            </div>
            <div class="files-list-container" id="files-list-container">
                <ul class="files-list" id="files-list"></ul>
            </div>
            <div class="file-viewer" id="file-viewer" style="display:none;">
                <div class="file-viewer-title" id="file-viewer-title"></div>
                <div id="file-viewer-content"></div>
                <button class="download-btn" id="download-btn" style="display:none;">Download</button>
                <button class="fullscreen-btn" id="fullscreen-btn" style="display:none;">Open Fullscreen</button>
            </div>
        </div>
    </div>
    <!-- Fullscreen Overlay -->
    <div id="fullscreen-overlay">
        <button id="fullscreen-download" title="Download">&#8681;</button>
        <button id="fullscreen-close" title="Close fullscreen">&times;</button>
        <div id="fullscreen-content"></div>
    </div>
    <!-- Confirm Delete Overlay -->
    <div id="confirm-overlay">
        <div id="confirm-dialog">
            <h2 id="confirm-title">Are you sure?</h2>
            <p id="confirm-message"></p>
            <div class="confirm-btn-row">
                <button class="confirm-btn yes-btn" id="confirm-yes">Yes</button>
                <button class="confirm-btn no-btn" id="confirm-no">No</button>
            </div>
        </div>
    </div>
</div>
<script>
    // --- File Explorer Logic ---
    let currentFolder = "downloads"; // Default to downloads
    let currentFiles = [];
    let selectedFile = null;
    let currentFullscreenFile = null;
    let expectingFilePicker = false; // Flag to track if the file picker was opened

    // Confirm overlay state
    let pendingDelete = null;

    // Utility: Get all localStorage keys and values as "files"
    function getLDriveFiles() {
        const files = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            const value = localStorage.getItem(key);
            files.push({ name: key, value });
        }
        return files;
    }

    // Utility: Downloads folder logic
    function getDownloadFiles() {
        const key = "LOOS_downloads";
        const raw = localStorage.getItem(key);
        if (!raw) return [];
        try {
            const files = JSON.parse(raw);
            if (Array.isArray(files)) return files;
        } catch(e) {}
        return [];
    }

    function updateFilesTitle() {
        const title = document.getElementById('files-title');
        if (currentFolder === "l_drive") {
            title.textContent = "Files in L://";
        } else {
            title.textContent = "Files in Downloads";
        }
    }

    function renderFilesList() {
        const ul = document.getElementById('files-list');
        ul.innerHTML = '';
        if (currentFiles.length === 0) {
            ul.innerHTML = "<li style='color:#888;'>No files found.</li>";
            hideFileViewer();
            return;
        }
        currentFiles.forEach((file, idx) => {
            const li = document.createElement('li');
            li.textContent = file.name;
            li.className = selectedFile === idx ? 'active' : '';

            // File click (fullscreen)
            li.addEventListener('click', (e) => {
                // Don't trigger fullscreen if clicking delete button
                if (e.target.classList.contains('delete-btn')) return;
                selectedFile = idx;
                renderFilesList();
                openFileFullscreen(file);
            });

            // Add delete button per file
            const delBtn = document.createElement('button');
            delBtn.className = 'delete-btn';
            delBtn.textContent = 'Delete';

            delBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                // Show confirm overlay
                showDeleteOverlay(file, currentFolder);
            });

            li.appendChild(delBtn);
            ul.appendChild(li);
        });
        // Make the files-list-container fill remaining vertical space
        const container = document.getElementById('files-list-container');
        container.style.height = "calc(100vh - 8.2rem)";
    }

    function hideFileViewer() {
        document.getElementById('file-viewer').style.display = 'none';
    }

    // Download helper
    function downloadFile(name, data, type) {
        let blob;
        if (type === "image" || type === "video" || data.startsWith('data:')) {
            blob = dataURItoBlob(data);
        } else {
            blob = new Blob([data], { type: "text/plain" });
        }
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = name;
        document.body.appendChild(a);
        a.click();
        setTimeout(() => {
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }, 100);
    }

    function dataURItoBlob(dataURI) {
        const byteString = atob(dataURI.split(',')[1]);
        const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
        const ab = new ArrayBuffer(byteString.length);
        const ia = new Uint8Array(ab);
        for (let i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }
        return new Blob([ab], { type: mimeString });
    }

    // File type detection and rendering
    function detectFileType(file) {
        // Returns {type, data, name}
        let type = 'text', data = '', name = '';
        if (currentFolder === "l_drive") {
            name = file.name;
            if (typeof file.value === 'string') {
                if (file.value.startsWith('data:image/')) {
                    type = 'image'; data = file.value;
                } else if (file.value.startsWith('data:video/')) {
                    type = 'video'; data = file.value;
                } else if (file.value.startsWith('data:text/html')) {
                    type = 'html'; data = file.value;
                } else if (file.value.startsWith('data:application/pdf')) {
                    type = 'pdf'; data = file.value;
                } else if (file.value.startsWith('data:text/markdown')) {
                    type = 'markdown'; data = file.value;
                } else if (file.value.startsWith('data:text/csv')) {
                    type = 'csv'; data = file.value;
                } else if (file.value.startsWith('data:application/json')) {
                    type = 'json'; data = file.value;
                } else if (file.value.startsWith('data:application/javascript') || file.value.startsWith('data:text/javascript')) {
                    type = 'js'; data = file.value;
                } else if (file.value.startsWith('data:text/css')) {
                    type = 'css'; data = file.value;
                } else if (file.value.startsWith('data:text/plain')) {
                    type = 'text'; data = file.value;
                } else if (file.value.startsWith('data:')) {
                    type = 'text'; data = file.value;
                } else {
                    type = 'text'; data = file.value;
                }
            }
        } else { // Downloads folder
            name = file.name;
            if (file.type && typeof file.data === 'string') {
                if (file.type.startsWith('image')) {
                    type = 'image'; data = file.data;
                } else if (file.type.startsWith('video')) {
                    type = 'video'; data = file.data;
                } else if (file.type.startsWith('application/pdf')) {
                    type = 'pdf'; data = file.data;
                } else if (file.type.startsWith('text/html')) {
                    type = 'html'; data = file.data;
                } else if (file.type.startsWith('text/markdown')) {
                    type = 'markdown'; data = file.data;
                } else if (file.type.startsWith('text/csv')) {
                    type = 'csv'; data = file.data;
                } else if (file.type.startsWith('application/json')) {
                    type = 'json'; data = file.data;
                } else if (file.type.startsWith('application/javascript') || file.type.startsWith('text/javascript')) {
                    type = 'js'; data = file.data;
                } else if (file.type.startsWith('text/css')) {
                    type = 'css'; data = file.data;
                } else if (file.type.startsWith('text/plain')) {
                    type = 'text'; data = file.data;
                } else {
                    type = 'text'; data = file.data;
                }
            } else {
                type = 'text'; data = file.data;
            }
        }
        return { type, data, name };
    }

    // Fullscreen embed logic
    const fullscreenOverlay = document.getElementById('fullscreen-overlay');
    const fullscreenContent = document.getElementById('fullscreen-content');
    const fullscreenClose = document.getElementById('fullscreen-close');
    const fullscreenDownload = document.getElementById('fullscreen-download');

    function openFileFullscreen(file) {
        const { type, data, name } = detectFileType(file);
        currentFullscreenFile = { name, data, type };
        openFullscreenEmbed(type, data, name);
    }

    function openFullscreenEmbed(type, data, name) {
        fullscreenContent.innerHTML = '';
        if (type === 'image') {
            const img = document.createElement('img');
            img.src = data;
            img.alt = name;
            fullscreenContent.appendChild(img);
        } else if (type === 'video') {
            const video = document.createElement('video');
            video.src = data;
            video.controls = true;
            video.autoplay = true;
            fullscreenContent.appendChild(video);
        } else if (type === 'html') {
            const iframe = document.createElement('iframe');
            if (data.startsWith('data:text/html')) {
                iframe.srcdoc = atob(data.split(',')[1]);
            } else {
                iframe.srcdoc = data;
            }
            iframe.style.width = "92vw";
            iframe.style.height = "88vh";
            iframe.style.border = "none";
            fullscreenContent.appendChild(iframe);
        } else if (type === 'markdown' || type === 'csv' || type === 'json' || type === 'js' || type === 'css' || type === 'text') {
             const pre = document.createElement('pre');
             if (typeof data === "string" && data.startsWith('data:')) {
                // Decode base64 data URI if present
                try {
                    pre.textContent = atob(data.split(',')[1] || "");
                } catch(e) {
                    pre.textContent = "Error decoding file content.";
                }
            } else {
                pre.textContent = data;
            }
            fullscreenContent.appendChild(pre);
        } else if (type === 'pdf') {
            const iframe = document.createElement('iframe');
            iframe.src = data;
            iframe.style.width = "92vw";
            iframe.style.height = "88vh";
            iframe.style.border = "none";
            fullscreenContent.appendChild(iframe);
        }
        fullscreenOverlay.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    fullscreenClose.onclick = () => {
        fullscreenOverlay.style.display = 'none';
        fullscreenContent.innerHTML = '';
        document.body.style.overflow = '';
        currentFullscreenFile = null;
    };

    fullscreenDownload.onclick = () => {
        if (!currentFullscreenFile) return;
        let { name, data, type } = currentFullscreenFile;
        downloadFile(name, data, type);
    };

    document.addEventListener('keydown', function(e) {
        if (fullscreenOverlay.style.display === 'flex' && e.key === 'Escape') {
            fullscreenClose.onclick();
        }
        if (confirmOverlay.style.display === 'flex' && e.key === 'Escape') {
            hideDeleteOverlay();
        }
    });

    // Sidebar menu logic
    const sidebarItems = document.querySelectorAll('.sidebar-item');
    sidebarItems.forEach(item => {
        item.addEventListener('click', () => {
            sidebarItems.forEach(it => it.classList.remove('active'));
            item.classList.add('active');
            currentFolder = item.getAttribute('data-folder');
            selectedFile = null;
            document.getElementById('upload-area').style.display = currentFolder === "downloads" ? "flex" : "none";
            if (currentFolder === "l_drive") {
                currentFiles = getLDriveFiles();
            } else {
                currentFiles = getDownloadFiles();
            }
            updateFilesTitle();
            renderFilesList();
            hideFileViewer();
        });
    });

    // Upload logic for Downloads folder
    const uploadInput = document.getElementById('upload-input');
    const uploadLabel = document.querySelector('.upload-label');
    const uploadFilename = document.getElementById('upload-filename');

    uploadLabel.addEventListener('click', () => {
        uploadInput.value = "";
        uploadFilename.textContent = "";
    });

    uploadInput.addEventListener('click', function() {
        // We set a flag to handle re-entry when focus returns.
        expectingFilePicker = true;
        // Also send the exit message to the top-level window.
        window.top.postMessage('exit-fullscreen', '*');
    });

    // This handles re-entering fullscreen if the user cancels the file dialog
    window.addEventListener('focus', () => {
        if (expectingFilePicker) {
            // A short delay helps ensure the transition is smooth
            setTimeout(() => {
                window.top.postMessage('enter-fullscreen', '*');
            }, 200);
            expectingFilePicker = false;
        }
    });

    uploadInput.addEventListener('change', function() {
        // A file was selected, so the 'focus' handler is no longer needed for this action
        expectingFilePicker = false;
        
        const file = uploadInput.files[0];
        if (!file) return;

        uploadFilename.textContent = file.name;
        const reader = new FileReader();

        reader.onload = function(e) {
            const dataResult = e.target.result;
            const type = file.type || "text/plain";
            const fileEntry = { name: file.name, data: dataResult, type: type };

            let files = getDownloadFiles();
            files.push(fileEntry);
            localStorage.setItem("LOOS_downloads", JSON.stringify(files));

            if (currentFolder === "downloads") {
                currentFiles = getDownloadFiles();
                renderFilesList();
            }
            uploadFilename.textContent = "Uploaded: " + file.name;
            // We still re-enter fullscreen here for the successful upload case
            window.top.postMessage('enter-fullscreen', '*');
        };

        if (file.type.startsWith("text/") || !file.type) {
            reader.readAsText(file);
        } else {
            reader.readAsDataURL(file);
        }
    });

    // Confirm delete overlay logic
    const confirmOverlay = document.getElementById('confirm-overlay');
    const confirmTitle = document.getElementById('confirm-title');
    const confirmMessage = document.getElementById('confirm-message');
    const confirmYes = document.getElementById('confirm-yes');
    const confirmNo = document.getElementById('confirm-no');

    function showDeleteOverlay(file, folderType) {
        pendingDelete = { file, folderType };
        confirmTitle.textContent = "Are you sure?";
        if (folderType === "l_drive") {
            confirmMessage.textContent = "Deleting files from the main storage could result in problems at the next time you start the OS! Are you certain you want to continue?";
        } else {
            confirmMessage.textContent = "Are you sure you want to delete this file?";
        }
        confirmOverlay.style.display = "flex";
    }

    function hideDeleteOverlay() {
        confirmOverlay.style.display = "none";
        pendingDelete = null;
    }

    confirmYes.onclick = function() {
        if (!pendingDelete) return;
        const { file, folderType } = pendingDelete;
        if (folderType === "l_drive") {
            localStorage.removeItem(file.name);
            currentFiles = getLDriveFiles();
        } else {
            let files = getDownloadFiles();
            files = files.filter(f => f.name !== file.name);
            localStorage.setItem("LOOS_downloads", JSON.stringify(files));
            currentFiles = files;
        }
        selectedFile = null;
        renderFilesList();
        hideFileViewer();
        hideDeleteOverlay();
    };

    confirmNo.onclick = function() {
        hideDeleteOverlay();
    };

    // Initial render (downloads as default)
    document.getElementById('upload-area').style.display = "flex";
    currentFiles = getDownloadFiles();
    updateFilesTitle();
    renderFilesList();

    // Optional: expose downloads API for other apps
    window.LOOS_Downloads = {
        getFiles: getDownloadFiles,
        addFile: function(name, data, type="text/plain") {
            let files = getDownloadFiles();
            files.push({ name, data, type });
            localStorage.setItem("LOOS_downloads", JSON.stringify(files));
            if (currentFolder === "downloads") {
                currentFiles = getDownloadFiles();
                renderFilesList();
            }
        },
        removeFile: function(name) {
            let files = getDownloadFiles();
            files = files.filter(f => f.name !== name);
            localStorage.setItem("LOOS_downloads", JSON.stringify(files));
            if (currentFolder === "downloads") {
                currentFiles = getDownloadFiles();
                renderFilesList();
            }
        }
    };
</script>
</body>
</html>

